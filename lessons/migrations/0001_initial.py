# Generated by Django 5.0.2 on 2025-08-29 20:51

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('students', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Lesson title', max_length=200)),
                ('description', models.TextField(help_text='Lesson description')),
                ('subject', models.CharField(choices=[('mathematics', 'Mathematics'), ('science', 'Science'), ('english', 'English'), ('history', 'History'), ('geography', 'Geography'), ('physical_education', 'Physical Education'), ('art', 'Art'), ('music', 'Music'), ('computer_science', 'Computer Science'), ('languages', 'Languages'), ('other', 'Other')], help_text='Subject area', max_length=20)),
                ('grade_level', models.CharField(help_text='Target grade level', max_length=10)),
                ('lesson_type', models.CharField(choices=[('lecture', 'Lecture'), ('interactive', 'Interactive'), ('practical', 'Practical'), ('assessment', 'Assessment'), ('review', 'Review'), ('project_based', 'Project-Based'), ('collaborative', 'Collaborative'), ('other', 'Other')], help_text='Type of lesson', max_length=20)),
                ('difficulty', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('expert', 'Expert')], default='intermediate', max_length=20)),
                ('duration_minutes', models.PositiveIntegerField(help_text='Estimated duration in minutes')),
                ('learning_objectives', models.JSONField(default=list, help_text='List of learning objectives')),
                ('prerequisites', models.JSONField(default=list, help_text='Prerequisites for this lesson')),
                ('materials_required', models.JSONField(default=list, help_text='Materials needed for this lesson')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_lessons', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Lesson',
                'verbose_name_plural': 'Lessons',
                'ordering': ['subject', 'grade_level', 'title'],
            },
        ),
        migrations.CreateModel(
            name='LessonAssessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assessment_type', models.CharField(choices=[('quiz', 'Quiz'), ('test', 'Test'), ('assignment', 'Assignment'), ('project', 'Project'), ('presentation', 'Presentation'), ('participation', 'Participation'), ('other', 'Other')], max_length=20)),
                ('title', models.CharField(help_text='Assessment title', max_length=200)),
                ('description', models.TextField(help_text='Assessment description')),
                ('questions', models.JSONField(default=list, help_text='Assessment questions and content')),
                ('scoring_criteria', models.JSONField(default=dict, help_text='Scoring criteria and rubrics')),
                ('time_limit', models.PositiveIntegerField(blank=True, help_text='Time limit in minutes', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assessments', to='lessons.lesson')),
            ],
            options={
                'verbose_name': 'Lesson Assessment',
                'verbose_name_plural': 'Lesson Assessments',
                'ordering': ['lesson', 'assessment_type', 'title'],
            },
        ),
        migrations.CreateModel(
            name='LessonMaterial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('material_type', models.CharField(choices=[('document', 'Document'), ('video', 'Video'), ('audio', 'Audio'), ('image', 'Image'), ('presentation', 'Presentation'), ('worksheet', 'Worksheet'), ('interactive', 'Interactive Content'), ('link', 'External Link'), ('other', 'Other')], max_length=20)),
                ('title', models.CharField(help_text='Material title', max_length=200)),
                ('description', models.TextField(help_text='Material description')),
                ('file_path', models.CharField(blank=True, help_text='Path to material file', max_length=500)),
                ('url', models.URLField(blank=True, help_text='URL to external material')),
                ('content', models.TextField(blank=True, help_text='Direct content or text')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='materials', to='lessons.lesson')),
            ],
            options={
                'verbose_name': 'Lesson Material',
                'verbose_name_plural': 'Lesson Materials',
                'ordering': ['lesson', 'material_type', 'title'],
            },
        ),
        migrations.CreateModel(
            name='LessonPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plan_title', models.CharField(help_text='Plan title', max_length=200)),
                ('plan_description', models.TextField(help_text='Detailed plan description')),
                ('learning_outcomes', models.JSONField(default=list, help_text='Expected learning outcomes')),
                ('activities', models.JSONField(default=list, help_text='List of activities and their descriptions')),
                ('time_allocation', models.JSONField(default=dict, help_text='Time allocation for each activity')),
                ('assessment_criteria', models.JSONField(default=list, help_text='Assessment criteria')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='plans', to='lessons.lesson')),
            ],
            options={
                'verbose_name': 'Lesson Plan',
                'verbose_name_plural': 'Lesson Plans',
                'ordering': ['lesson', 'plan_title'],
            },
        ),
        migrations.CreateModel(
            name='LessonSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scheduled_date', models.DateTimeField(help_text='Scheduled date and time')),
                ('actual_start_time', models.DateTimeField(blank=True, help_text='Actual start time', null=True)),
                ('actual_end_time', models.DateTimeField(blank=True, help_text='Actual end time', null=True)),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('postponed', 'Postponed')], default='scheduled', max_length=20)),
                ('participants', models.JSONField(default=list, help_text='List of participating students')),
                ('notes', models.TextField(blank=True, help_text='Session notes and observations')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('instructor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='taught_sessions', to=settings.AUTH_USER_MODEL)),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='lessons.lesson')),
            ],
            options={
                'verbose_name': 'Lesson Session',
                'verbose_name_plural': 'Lesson Sessions',
                'ordering': ['-scheduled_date'],
            },
        ),
        migrations.CreateModel(
            name='LessonProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('progress_status', models.CharField(choices=[('not_started', 'Not Started'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('needs_review', 'Needs Review'), ('mastered', 'Mastered')], default='not_started', max_length=20)),
                ('completion_percentage', models.PositiveIntegerField(default=0, help_text='Completion percentage', validators=[django.core.validators.MaxValueValidator(100)])),
                ('time_spent_minutes', models.PositiveIntegerField(default=0, help_text='Time spent on lesson in minutes')),
                ('last_accessed', models.DateTimeField(auto_now=True, help_text='Last time lesson was accessed')),
                ('assessment_scores', models.JSONField(default=dict, help_text='Assessment scores and results')),
                ('notes', models.TextField(blank=True, help_text='Student notes and feedback')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_progress', to='lessons.lesson')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lesson_progress', to='students.student')),
            ],
            options={
                'verbose_name': 'Lesson Progress',
                'verbose_name_plural': 'Lesson Progress Records',
                'ordering': ['lesson', 'student'],
                'unique_together': {('lesson', 'student')},
            },
        ),
    ]
