# Generated by Django 5.0.2 on 2025-08-29 20:00

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student_id', models.CharField(help_text='Unique student identifier', max_length=20, unique=True)),
                ('grade_level', models.CharField(choices=[('K', 'Kindergarten'), ('1', 'Grade 1'), ('2', 'Grade 2'), ('3', 'Grade 3'), ('4', 'Grade 4'), ('5', 'Grade 5'), ('6', 'Grade 6'), ('7', 'Grade 7'), ('8', 'Grade 8'), ('9', 'Grade 9'), ('10', 'Grade 10'), ('11', 'Grade 11'), ('12', 'Grade 12')], max_length=20)),
                ('academic_year', models.CharField(max_length=20)),
                ('enrollment_date', models.DateField()),
                ('is_active_student', models.BooleanField(default=True)),
                ('academic_status', models.CharField(choices=[('enrolled', 'Enrolled'), ('graduated', 'Graduated'), ('transferred', 'Transferred'), ('suspended', 'Suspended'), ('withdrawn', 'Withdrawn')], default='enrolled', max_length=20)),
                ('learning_style', models.CharField(blank=True, choices=[('visual', 'Visual'), ('auditory', 'Auditory'), ('kinesthetic', 'Kinesthetic'), ('reading', 'Reading/Writing'), ('mixed', 'Mixed')], max_length=50, null=True)),
                ('preferred_language', models.CharField(default='en', max_length=10)),
                ('ai_learning_enabled', models.BooleanField(default=True)),
                ('ai_difficulty_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')], default='intermediate', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='student_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Student',
                'verbose_name_plural': 'Students',
                'db_table': 'students',
            },
        ),
        migrations.CreateModel(
            name='LearningSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_type', models.CharField(choices=[('ai_lesson', 'AI Lesson'), ('video_lesson', 'Video Lesson'), ('quiz', 'Quiz'), ('project_work', 'Project Work'), ('reading', 'Reading'), ('practice', 'Practice Exercise')], max_length=50)),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('duration_minutes', models.IntegerField(blank=True, null=True)),
                ('attention_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('engagement_level', models.CharField(blank=True, choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], max_length=20, null=True)),
                ('webcam_analysis', models.JSONField(blank=True, default=dict)),
                ('behavior_notes', models.TextField(blank=True, null=True)),
                ('completed', models.BooleanField(default=False)),
                ('performance_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('lesson_id', models.CharField(blank=True, max_length=100, null=True)),
                ('device_info', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='learning_sessions', to='students.student')),
            ],
            options={
                'db_table': 'learning_sessions',
                'ordering': ['-start_time'],
            },
        ),
        migrations.CreateModel(
            name='StudentGoal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('goal_type', models.CharField(choices=[('academic', 'Academic'), ('skill', 'Skill Development'), ('behavioral', 'Behavioral'), ('social', 'Social'), ('personal', 'Personal')], max_length=50)),
                ('target_date', models.DateField()),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=20)),
                ('progress_percentage', models.DecimalField(decimal_places=2, default=0, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('status', models.CharField(choices=[('not_started', 'Not Started'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('on_hold', 'On Hold'), ('cancelled', 'Cancelled')], default='not_started', max_length=20)),
                ('ai_suggestions', models.JSONField(blank=True, default=list)),
                ('ai_milestones', models.JSONField(blank=True, default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='goals', to='students.student')),
            ],
            options={
                'db_table': 'student_goals',
                'ordering': ['-priority', 'target_date'],
            },
        ),
        migrations.CreateModel(
            name='StudentProject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('project_type', models.CharField(choices=[('art', 'Art'), ('code', 'Code/Programming'), ('video', 'Video'), ('writing', 'Writing'), ('science', 'Science'), ('math', 'Mathematics'), ('social_studies', 'Social Studies'), ('other', 'Other')], max_length=50)),
                ('project_file', models.FileField(blank=True, null=True, upload_to='student_projects/')),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='project_thumbnails/')),
                ('tags', models.JSONField(blank=True, default=list)),
                ('difficulty_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')], max_length=20)),
                ('ai_feedback', models.TextField(blank=True, null=True)),
                ('ai_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('is_public', models.BooleanField(default=False)),
                ('is_featured', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='projects', to='students.student')),
            ],
            options={
                'db_table': 'student_projects',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AcademicRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(max_length=100)),
                ('semester', models.CharField(max_length=20)),
                ('academic_year', models.CharField(max_length=20)),
                ('grade', models.CharField(choices=[('A+', 'A+'), ('A', 'A'), ('A-', 'A-'), ('B+', 'B+'), ('B', 'B'), ('B-', 'B-'), ('C+', 'C+'), ('C', 'C'), ('C-', 'C-'), ('D+', 'D+'), ('D', 'D'), ('D-', 'D-'), ('F', 'F'), ('P', 'Pass'), ('I', 'Incomplete')], max_length=5)),
                ('score', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('attendance_percentage', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('participation_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('ai_recommendations', models.JSONField(blank=True, default=dict)),
                ('learning_gaps', models.JSONField(blank=True, default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='academic_records', to='students.student')),
            ],
            options={
                'db_table': 'academic_records',
                'unique_together': {('student', 'subject', 'semester', 'academic_year')},
            },
        ),
    ]
