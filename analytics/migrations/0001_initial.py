# Generated by Django 5.0.2 on 2025-08-29 20:00

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DashboardConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('layout_type', models.CharField(choices=[('grid', 'Grid Layout'), ('list', 'List Layout'), ('custom', 'Custom Layout')], default='grid', max_length=20)),
                ('enabled_widgets', models.JSONField(default=list, help_text='List of enabled dashboard widgets')),
                ('widget_positions', models.JSONField(default=dict, help_text='Widget positions and sizes')),
                ('widget_settings', models.JSONField(default=dict, help_text='Individual widget configurations')),
                ('preferred_chart_types', models.JSONField(default=list, help_text='Preferred chart types for data visualization')),
                ('color_scheme', models.CharField(default='default', help_text='Dashboard color scheme', max_length=50)),
                ('refresh_interval', models.IntegerField(default=300, help_text='Data refresh interval in seconds')),
                ('data_range', models.CharField(choices=[('1d', '1 Day'), ('1w', '1 Week'), ('1m', '1 Month'), ('3m', '3 Months'), ('6m', '6 Months'), ('1y', '1 Year'), ('all', 'All Time')], default='1m', max_length=20)),
                ('notification_preferences', models.JSONField(default=dict, help_text='Dashboard notification preferences')),
                ('alert_thresholds', models.JSONField(default=dict, help_text='Alert thresholds for various metrics')),
                ('font_size', models.CharField(choices=[('small', 'Small'), ('medium', 'Medium'), ('large', 'Large'), ('extra_large', 'Extra Large')], default='medium', max_length=20)),
                ('high_contrast', models.BooleanField(default=False)),
                ('screen_reader_friendly', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='dashboard_config', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'dashboard_configurations',
            },
        ),
        migrations.CreateModel(
            name='ReportTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('template_type', models.CharField(choices=[('student_progress', 'Student Progress Report'), ('academic_performance', 'Academic Performance Report'), ('engagement_analysis', 'Engagement Analysis Report'), ('behavioral_summary', 'Behavioral Summary Report'), ('ai_insights', 'AI Insights Report'), ('comprehensive', 'Comprehensive Report')], max_length=50)),
                ('target_audience', models.CharField(choices=[('student', 'Student'), ('family', 'Family/Guardian'), ('staff', 'Staff/Teacher'), ('admin', 'Administrator'), ('all', 'All Users')], max_length=50)),
                ('sections', models.JSONField(default=list, help_text='Report sections and their order')),
                ('metrics_included', models.JSONField(default=list, help_text='Metrics to include in the report')),
                ('visualizations', models.JSONField(default=list, help_text='Charts and graphs to include')),
                ('include_charts', models.BooleanField(default=True)),
                ('include_tables', models.BooleanField(default=True)),
                ('include_summaries', models.BooleanField(default=True)),
                ('include_recommendations', models.BooleanField(default=True)),
                ('export_formats', models.JSONField(default=list, help_text='Available export formats')),
                ('custom_styling', models.JSONField(blank=True, default=dict, help_text='Custom styling options')),
                ('is_public', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_report_templates', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'report_templates',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='EngagementAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('total_engagement_score', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('lesson_engagement', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('project_engagement', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('social_engagement', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('morning_engagement', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('afternoon_engagement', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('evening_engagement', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('engagement_pattern', models.CharField(choices=[('consistent', 'Consistent'), ('variable', 'Variable'), ('declining', 'Declining'), ('improving', 'Improving'), ('sporadic', 'Sporadic')], max_length=50)),
                ('peak_engagement_hours', models.JSONField(blank=True, default=list)),
                ('low_engagement_periods', models.JSONField(blank=True, default=list)),
                ('attention_span', models.IntegerField(help_text='Average attention span in minutes')),
                ('distraction_frequency', models.IntegerField(default=0, help_text='Number of distractions detected')),
                ('re_engagement_rate', models.DecimalField(decimal_places=2, help_text='Rate of re-engagement after distractions', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('engagement_recommendations', models.JSONField(blank=True, default=list)),
                ('optimal_learning_times', models.JSONField(blank=True, default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='engagement_analytics', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'engagement_analytics',
                'ordering': ['-date'],
                'unique_together': {('student', 'date')},
            },
        ),
        migrations.CreateModel(
            name='LearningAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('total_learning_time', models.IntegerField(help_text='Total learning time in minutes')),
                ('active_learning_time', models.IntegerField(help_text='Active/engaged learning time in minutes')),
                ('sessions_started', models.IntegerField(default=0)),
                ('sessions_completed', models.IntegerField(default=0)),
                ('sessions_abandoned', models.IntegerField(default=0)),
                ('average_attention_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('average_engagement_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('subject_performance', models.JSONField(default=dict, help_text='Performance by subject')),
                ('skill_progress', models.JSONField(default=dict, help_text='Progress by skill area')),
                ('ai_conversations_count', models.IntegerField(default=0)),
                ('ai_recommendations_followed', models.IntegerField(default=0)),
                ('ai_lessons_completed', models.IntegerField(default=0)),
                ('learning_patterns', models.JSONField(blank=True, default=dict)),
                ('attention_trends', models.JSONField(blank=True, default=list)),
                ('engagement_peaks', models.JSONField(blank=True, default=list)),
                ('data_quality_score', models.DecimalField(decimal_places=2, default=100, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='learning_analytics', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'learning_analytics',
                'ordering': ['-date'],
                'unique_together': {('student', 'date')},
            },
        ),
        migrations.CreateModel(
            name='PerformanceMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('overall_gpa', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(4)])),
                ('subject_grades', models.JSONField(default=dict, help_text='Grades by subject')),
                ('improvement_rate', models.DecimalField(blank=True, decimal_places=2, help_text='Percentage improvement over time', max_digits=5, null=True)),
                ('learning_speed', models.CharField(blank=True, choices=[('slow', 'Slow'), ('average', 'Average'), ('fast', 'Fast'), ('accelerated', 'Accelerated')], max_length=20, null=True)),
                ('retention_rate', models.DecimalField(blank=True, decimal_places=2, help_text='Information retention percentage', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('goals_set', models.IntegerField(default=0)),
                ('goals_achieved', models.IntegerField(default=0)),
                ('goal_success_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('peer_percentile', models.DecimalField(blank=True, decimal_places=2, help_text='Performance percentile compared to peers', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('grade_level_percentile', models.DecimalField(blank=True, decimal_places=2, help_text='Performance percentile within grade level', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('ai_learning_recommendations', models.JSONField(blank=True, default=list)),
                ('predicted_performance', models.JSONField(blank=True, default=dict)),
                ('period_start', models.DateField()),
                ('period_end', models.DateField()),
                ('period_type', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('semester', 'Semester'), ('yearly', 'Yearly')], max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performance_metrics', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'performance_metrics',
                'ordering': ['-period_end'],
                'unique_together': {('student', 'period_start', 'period_end', 'period_type')},
            },
        ),
    ]
