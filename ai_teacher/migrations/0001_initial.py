# Generated by Django 5.0.2 on 2025-08-29 20:00

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('students', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AIBehavioralAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('analysis_timestamp', models.DateTimeField(auto_now_add=True)),
                ('analysis_duration', models.IntegerField(help_text='Duration of analysis in seconds')),
                ('attention_score', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('engagement_level', models.CharField(choices=[('very_low', 'Very Low'), ('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('very_high', 'Very High')], max_length=20)),
                ('focus_quality', models.CharField(choices=[('distracted', 'Distracted'), ('partially_focused', 'Partially Focused'), ('focused', 'Focused'), ('highly_focused', 'Highly Focused')], max_length=20)),
                ('emotional_state', models.CharField(blank=True, choices=[('happy', 'Happy'), ('focused', 'Focused'), ('frustrated', 'Frustrated'), ('bored', 'Bored'), ('confused', 'Confused'), ('excited', 'Excited'), ('neutral', 'Neutral')], max_length=50, null=True)),
                ('emotional_confidence', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('behavior_patterns', models.JSONField(blank=True, default=list)),
                ('recommendations', models.JSONField(blank=True, default=list)),
                ('alerts', models.JSONField(blank=True, default=list)),
                ('ai_model_used', models.CharField(max_length=100)),
                ('analysis_parameters', models.JSONField(blank=True, default=dict)),
                ('analysis_quality_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='behavioral_analyses', to='students.learningsession')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='behavioral_analyses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'ai_behavioral_analyses',
                'ordering': ['-analysis_timestamp'],
            },
        ),
        migrations.CreateModel(
            name='AILesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('subject', models.CharField(max_length=100)),
                ('grade_level', models.CharField(choices=[('K', 'Kindergarten'), ('1', 'Grade 1'), ('2', 'Grade 2'), ('3', 'Grade 3'), ('4', 'Grade 4'), ('5', 'Grade 5'), ('6', 'Grade 6'), ('7', 'Grade 7'), ('8', 'Grade 8'), ('9', 'Grade 9'), ('10', 'Grade 10'), ('11', 'Grade 11'), ('12', 'Grade 12')], max_length=20)),
                ('difficulty_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')], max_length=20)),
                ('lesson_type', models.CharField(choices=[('interactive', 'Interactive AI'), ('video', 'Video Lesson'), ('reading', 'Reading Material'), ('quiz', 'Quiz/Assessment'), ('project', 'Project-Based'), ('practice', 'Practice Exercise')], max_length=50)),
                ('content', models.JSONField(default=dict, help_text='Structured lesson content')),
                ('learning_objectives', models.JSONField(default=list)),
                ('prerequisites', models.JSONField(default=list)),
                ('ai_model_used', models.CharField(blank=True, max_length=100, null=True)),
                ('ai_generation_prompt', models.TextField(blank=True, null=True)),
                ('ai_parameters', models.JSONField(blank=True, default=dict)),
                ('estimated_duration', models.IntegerField(help_text='Duration in minutes')),
                ('is_adaptive', models.BooleanField(default=True, help_text='AI can modify lesson based on student performance')),
                ('is_active', models.BooleanField(default=True)),
                ('tags', models.JSONField(blank=True, default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_lessons', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'ai_lessons',
                'ordering': ['subject', 'grade_level', 'difficulty_level'],
            },
        ),
        migrations.CreateModel(
            name='AIConversation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('conversation_id', models.CharField(max_length=100, unique=True)),
                ('session_start', models.DateTimeField(auto_now_add=True)),
                ('session_end', models.DateTimeField(blank=True, null=True)),
                ('context', models.JSONField(default=dict, help_text='Conversation context and memory')),
                ('learning_objectives', models.JSONField(default=list)),
                ('ai_model', models.CharField(default='gpt-4', max_length=100)),
                ('ai_personality', models.CharField(default='helpful_teacher', max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('paused', 'Paused'), ('completed', 'Completed'), ('abandoned', 'Abandoned')], default='active', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_conversations', to=settings.AUTH_USER_MODEL)),
                ('lesson', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='conversations', to='ai_teacher.ailesson')),
            ],
            options={
                'db_table': 'ai_conversations',
                'ordering': ['-session_start'],
            },
        ),
        migrations.CreateModel(
            name='AIRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('recommendation_type', models.CharField(choices=[('lesson', 'Lesson Recommendation'), ('study_plan', 'Study Plan'), ('resource', 'Learning Resource'), ('activity', 'Activity Suggestion'), ('goal', 'Goal Setting'), ('behavior', 'Behavioral'), ('social', 'Social Development')], max_length=50)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=20)),
                ('urgency', models.CharField(choices=[('not_urgent', 'Not Urgent'), ('soon', 'Soon'), ('urgent', 'Urgent'), ('critical', 'Critical')], default='not_urgent', max_length=20)),
                ('ai_confidence', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('reasoning', models.TextField(help_text='AI explanation for this recommendation')),
                ('supporting_data', models.JSONField(blank=True, default=dict)),
                ('action_items', models.JSONField(blank=True, default=list)),
                ('estimated_effort', models.CharField(blank=True, choices=[('low', 'Low Effort'), ('medium', 'Medium Effort'), ('high', 'High Effort')], max_length=20, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('dismissed', 'Dismissed'), ('expired', 'Expired')], default='pending', max_length=20)),
                ('student_feedback', models.CharField(blank=True, choices=[('helpful', 'Helpful'), ('not_helpful', 'Not Helpful'), ('implemented', 'Implemented'), ('ignored', 'Ignored')], max_length=20, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_recommendations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'ai_recommendations',
                'ordering': ['-priority', '-urgency', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ConversationMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('message_type', models.CharField(choices=[('user', 'User Message'), ('ai', 'AI Response'), ('system', 'System Message'), ('instruction', 'Instruction')], max_length=20)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('sequence_number', models.IntegerField()),
                ('ai_model_response', models.JSONField(blank=True, default=dict)),
                ('ai_confidence', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('user_feedback', models.CharField(blank=True, choices=[('helpful', 'Helpful'), ('not_helpful', 'Not Helpful'), ('confusing', 'Confusing'), ('perfect', 'Perfect')], max_length=20, null=True)),
                ('processing_time_ms', models.IntegerField(blank=True, null=True)),
                ('tokens_used', models.IntegerField(blank=True, null=True)),
                ('conversation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='ai_teacher.aiconversation')),
            ],
            options={
                'db_table': 'conversation_messages',
                'ordering': ['conversation', 'sequence_number'],
                'unique_together': {('conversation', 'sequence_number')},
            },
        ),
    ]
